查看版本号:git -v
创建:创建仓库:git clone 已存在仓库的地址
             git init 文件名 (将一个目录转化为 Git 仓库，启用版本控制功能)
     创建目录:mkdir 文件名 (单纯在文件系统中创建一个新目录（文件夹）)
     创建文件:echo 文件内容 > 文件名.后缀 (创建文件并写入内容)
              touch 文件名.后缀 (创建空文件)
切换目录:cd
查看:ls (当前目录所有文件(不包括隐藏文件))
        ls -a (当前目录所有文件(包括隐藏文件))
        ls -l (以 长格式显示详细信息，包括权限、所有者、大小、修改时间等)
        ls -t (按 修改时间排序，最新的文件排在前面)
        ls -r (反转排序顺序，将默认的排序结果倒序显示)
        ls -altr (前四个命令的组合)
        ls -lifes (查看暂存区的内容)
        cat 文件名 (查看文件内容)
        git log (详细提交信息，作者、时间、完整描述)
        git log --oneline (简略但保存重要内容)
        git reflog (查看历史操作记录，使用git reset --hard 版本id 回退到版本id这一版)
        git diff (默认查看文件在工作区、暂存区之间的差异)
                 git diff HEAD(查看工作区、版本库(本地仓库)之间的差异)
                 git diff --cashed(查看暂存区、版本库(本地仓库)之间的差异)
                 git diff 版本id1 版本id2(查看不同版本之间的差异)
                 git diff HEAD~ HEAD(当前版本和上一个版本的差异，或git diff HEAD^ HEAD)
                 git diff HEAD~2 HEAD(当前版本和HEAD之前两个版本的差异)
                 git diff HEAD~2 HEAD 文件名.后缀(当前版本和HEAD之前两个版本此文件的差异)
                 (查看不同分支之间的差异)
                 以及版本库(本地仓库)

git mv:(移动或重命名文件)
        git mv 源文件路径/名字 目标路径/新名字
删除:\rm -rf .git (将Git仓库转为普通文件目录)
暂存:git add 文件名 (暂存此文件)
     git add .(暂存当前目录所有文件)
     git add *.后缀名(暂存当前目录后缀为此后缀名的所有文件)
提交:git commit -m ""
     git commit(进入交互页面，默认使用vim(强大的文本编辑器)来编辑提交信息，方向键移动光标，i键进入编辑模式,ESC退出编辑模式，输入:wq保存退出)
更改:mv 文件名 新文件名(修改文件名)
git reset: 退回之前的某一个提交状态
          git reset --sort 版本id 保留工作区和暂存区的所有修改内容
          git reset --hard HEAD^ 丢弃工作区和暂存区的所有修改内容
          git reset --mixed 版本id 保留工作区的修改内容，丢弃暂存区的修改内容

